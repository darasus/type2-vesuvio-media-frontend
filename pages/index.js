import Link from 'next/link'
import { components } from '../utils/mdxComponents'
import hydrate from 'next-mdx-remote/hydrate'
import renderToString from 'next-mdx-remote/render-to-string'
import fs from 'fs'
import path from 'path'
import matter from 'gray-matter'
import { ARTICLES_PATH, WEBSITES_PATH } from '../constant'

const Index = ({ source, frontMatter, articles }) => {
  const content = hydrate(source, { components })

  return (
    <div>
      <h1>{frontMatter.title}</h1>
      <p>
        Click the link below to navigate to a page generated by{' '}
        <code>next-mdx-remote</code>.
      </p>
      <div>{content}</div>
      <div>
        {articles.map((article, i) => {
          return (
            <div key={i}>
              <Link
                as={`/articles/${article.filePath.replace(/\.mdx?$/, '')}`}
                href={`/articles/[slug]`}
              >
                <a>{article.data.title}</a>
              </Link>
            </div>
          )
        })}
      </div>
    </div>
  )
}

export const getStaticProps = async () => {
  const source = fs.readFileSync(path.join(WEBSITES_PATH, 'home.mdx'))
  const { content, data } = matter(source)
  const mdxSource = await renderToString(content, {
    components,
    mdxOptions: {
      remarkPlugins: [],
      rehypePlugins: [],
    },
    scope: data,
  })
  const articleFilePaths = fs
    .readdirSync(ARTICLES_PATH)
    .filter(path => /\.mdx?$/.test(path))
  const articles = articleFilePaths.map(filePath => {
    const source = fs.readFileSync(path.join(ARTICLES_PATH, filePath))
    const { content, data } = matter(source)

    return {
      content,
      data,
      filePath,
    }
  })

  return {
    props: {
      source: mdxSource,
      frontMatter: data,
      articles,
    },
  }
}

export default Index
